C51 COMPILER V9.56.0.0   EXPT_7_TASK                                                       10/30/2025 12:55:21 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE EXPT_7_TASK
OBJECT MODULE PLACED IN .\Objects\expt 7 task.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE expt 7 task.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listin
                    -gs\expt 7 task.lst) TABS(2) OBJECT(.\Objects\expt 7 task.obj)

line level    source

   1          #include <MicroLABlet.h>
   2          
   3          sbit ADC_start = P2^6;
   4          sbit ADC_end_of_conversion = P2^7;
   5          sbit ADC_output_enable = P2^5;
   6          
   7          #define ADC_data P0
   8          #define declare_output_port 0x00
   9          #define declare_input_port 0xFF
  10          
  11          unsigned char ADC_value;
  12          unsigned char read_ADC();
  13          unsigned char charactor_count;
  14          void _nop_(void);
  15          
  16          unsigned char message_one[] = {"ADC I/P Voltage"};
  17          unsigned char message_two[] = {"= V    "};  // Space for fractional digits
  18          unsigned char ascii[] = "0123456789";
  19          
  20          void main(void)
  21          {
  22   1          unsigned char ADC_output;
  23   1          float voltage;
  24   1          unsigned char int_part, frac1, frac2;
  25   1      
  26   1          ADC_data = declare_input_port;
  27   1          P2 = declare_output_port;
  28   1          ADC_start = 0;
  29   1          ADC_end_of_conversion = 1;
  30   1          ADC_output_enable = 0;
  31   1      
  32   1          LCD_Initialization();
  33   1          LCD_command_write(0x80);  // First line
  34   1          while (message_one[charactor_count] != '\0') {
  35   2              LCD_message_write(message_one[charactor_count]);
  36   2              charactor_count++;
  37   2          }
  38   1      
  39   1          charactor_count = 0;
  40   1          LCD_command_write(0xC0);  // Second line
  41   1          while (message_two[charactor_count] != '\0') {
  42   2              LCD_message_write(message_two[charactor_count]);
  43   2              charactor_count++;
  44   2          }
  45   1      
  46   1          while (1) {
  47   2              ADC_output = read_ADC();
  48   2              voltage = (ADC_output * 5.0) / 255.0;  // Convert to voltage
  49   2      
  50   2              int_part = (unsigned char)voltage;
  51   2              frac1 = (unsigned char)((voltage - int_part) * 10);
  52   2              frac2 = (unsigned char)(((voltage - int_part) * 100)) % 10;
  53   2      
  54   2              LCD_command_write(0xC8);  // Position after '='
C51 COMPILER V9.56.0.0   EXPT_7_TASK                                                       10/30/2025 12:55:21 PAGE 2   

  55   2              LCD_message_write(ascii[int_part]);
  56   2              LCD_message_write('.');
  57   2              LCD_message_write(ascii[frac1]);
  58   2              LCD_message_write(ascii[frac2]);
  59   2          }
  60   1      }
  61          
  62          unsigned char read_ADC()
  63          {
  64   1          ADC_start = 1;
  65   1          _nop_(); _nop_(); _nop_(); _nop_();
  66   1          ADC_start = 0;
  67   1          _nop_(); _nop_(); _nop_();
  68   1          while (ADC_end_of_conversion == 1);
  69   1          ADC_output_enable = 1;
  70   1          _nop_(); _nop_(); _nop_(); _nop_();
  71   1          ADC_value = ADC_data;
  72   1          ADC_output_enable = 0;
  73   1          _nop_(); _nop_(); _nop_(); _nop_();
  74   1          return ADC_value;
  75   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    376    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     49       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
